openapi: 3.0.3
info:
  title: Bitcoin Data Service
  description: Allows bitcoin SPV (Simple Payment Verification) Clients to have a stateless access to the bitcoin network. A bitcoin data service will be designed such as to optimize the anonymity of SPV clients.
  version: 1.0.0
tags:
  - name: bitcoin
    description: Access to the bitcoin network for SPV-Clients
servers:
  - url: https://localhost:9092/
    description: Local
  - url: https://dial-data.mon-wallet.com/
    description: Integration
paths:
  /btc/transactions:
    post:
      tags:
        - bitcoin
      operationId: broadcastTransaction
      description: |
        Relay transactions produced by the SPV client to the bitcoin network.
      summary: Broadcast a transaction to the bitcoin network
      requestBody:
        required: true
        description: Transaction to be forwarded to the bitcoin network.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionDto'
      responses:
        "202":
          description: Transaction successfully submitted.
  /btc/transactions/address/{address}:
    get:
      tags:
        - bitcoin
      operationId: getTransactionsByAddress
      description: |
        Get transaction by address
      summary: Get transaction by address
      parameters:
        - in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Get transaction associated with the address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        "404":
          description: Address not found.
  /btc/transactions/{txId}/check:
    get:
      tags:
        - bitcoin
      operationId: checkTransaction
      description: |
        A submitted transaction is considered valid, when the transaction was forwarded to the MemPool nodes. Even though the bitcoin
        data service can validate transaction, having those transactions reported by other nodes as seen in the MemPool is part of
        validating the correctness of the transaction (Format, Signature)
      summary: Check if a transaction submitted to the network is valid.
      parameters:
        - in: path
          name: txId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Number of reporting nodes. A value greater than 0 means that the transaction is in the mempool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckTransactionResponse'
        "404":
          description: Transaction not found.
  /btc/blocks/transaction/{txId}:
    get:
      tags:
        - bitcoin
      operationId: getBlockByTransactionId
      description: |
        Find the block hosting a given transaction by id.
      summary: Find the block hosting a given transaction by id
      parameters:
        - in: path
          name: txId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Block information, where the transaction is located.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullBlockHeadersResponse'
        "404":
          description: Transaction not found.
  /btc/blocks/{blockHash}:
    get:
      tags:
        - bitcoin
      operationId: getBlock
      description: |
        Get a block by Hash.
      summary: Find the block by Hash
      parameters:
        - in: path
          name: blockHash
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Block information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockDto'
        "404":
          description: Block not found.
  /btc/blocks/height:
    get:
      tags:
        - bitcoin
      operationId: getBlocksByHeight
      description: |
        List all blocks within startHeight and endHeight.
      summary: List Blocks
      parameters:
        - in: query
          name: startHeight
          required: true
          description: Start height
          schema:
            type: integer
        - in: query
          name: endHeight
          required: true
          description: End height
          schema:
            type: integer
      responses:
        "200":
          description: List all blocks within startHeight and endHeight.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeadersResponse'
  /btc/blocks/time:
    get:
      tags:
        - bitcoin
      operationId: getBlocksByTime
      description: |
        List the next quantity blocks from startTime.
      summary: List Blocks
      parameters:
        - in: query
          name: startTime
          required: true
          schema:
            type: integer
        - in: query
          name: quantity
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: List the next quantity blocks from startTime.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockHeadersResponse'

components:
  schemas:
    CheckTransactionResponse:
      type: object
      required:
        - reportingBlocks
      properties:
        reportingBlocks:
          type: integer
          description: Number of reporting blocks.
    BlockDto:
      type: object
      required:
        - blockBytes
      properties:
        blockBytes:
          type: string
          format: byte
    FullBlockHeadersResponse:
      allOf:
        - $ref: '#/components/schemas/BlockHeaderDto'
        - $ref:  '#/components/schemas/BlockDto'
    BlockHeadersResponse:
      type: object
      required:
        - blocks
      properties:
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/BlockHeaderDto'
    BlockHeaderDto:
      type: object
      required:
        - blockHash
        - prevBlockHash
        - height
        - chainWork
        - time
        - txIds
      properties:
        blockHash:
          type: string
        prevBlockHash:
          type: string
        height:
          type: integer
        chainWork:
          type: integer
        time:
          type: integer
        txIds:
          type: array
          items:
            type: string
            description: Transaction Id
    TransactionDto:
      type: object
      required:
        - transactionBytes
      properties:
        transactionBytes:
          type: string
          format: byte
    TransactionsResponse:
      type: object
      required:
        - txIds
      properties:
        txIds:
          type: array
          items:
            type: string
            description: Transaction Id
